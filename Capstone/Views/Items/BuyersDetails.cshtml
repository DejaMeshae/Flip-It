@model Capstone.Models.Items

@{
    ViewBag.Title = "BuyersDetails";
}

<style>
    /*remember js goes inside of script tags*/
    #map {
        height: 310px;
        width: 450px;
    }
    .dl-horizontal {
    display: inline-block;
    /*overflow: hidden;*/
    /*text-align: left;*/
    /*background: #efefef;*/
    /*padding: 10px;*/
    width: 300px;
}

</style>

<br />
<h4><center>Item location</center></h4>

<div class="row">
    <center>
    <div id="map"></div>
    <script>
    /*remember js goes inside of script tags*/
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 43.038902, lng: -87.906471 },
                zoom: 8
            });
            infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    infoWindow.setPosition(pos);
                    infoWindow.setContent('Your Location!');
                    infoWindow.open(map);
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
            setMarkers(map);
        }
        var beaches = [
                ['Job', 43.016630, -88.007280, 1],
        ];
        function setMarkers(map) {
            var image = {
                url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
                    // This marker is 20 pixels wide by 32 pixels high.
                    size: new google.maps.Size(20, 32),
                    // The origin for this image is (0, 0).
                    origin: new google.maps.Point(0, 0),
                    // The anchor for this image is the base of the flagpole at (0, 32).
                    anchor: new google.maps.Point(0, 32)
            };
            var shape = {
                coords: [1, 1, 1, 20, 18, 20, 18, 1],
                type: 'poly'
            };
            var lat =@Model.Lat;
            var lng =@Model.Lng;

            var marker = new google.maps.Marker({
                position: {
                    lat: @Model.Lat,
                    lng: @Model.Lng
                },
                map: map,
                icon: image,
                shape: shape,
                title: 'item location marker',
                zIndex: 1
            });
            var bounds = new google.map.LatLngBounds();
            loc = new google.maps.LatLng(marker.position.lat(), marker.position.lng());
            bounds.extend(loc);
            map.fitBounds(bounds);
            map.panToBounds(bounds);
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDkHnmp3h5Tbjus8x_L8w2nWwaIrmjXo5U&callback=initMap"
            async defer></script>
    </center>
</div>

@*<h2>BuyersDetails</h2>*@

<div><center>
    <h4>Item details</h4>
    <hr />

    <dl class="dl-horizontal">

            @*@if (Model.Files.Any(f => f.FileType == Capstone.Models.FileType.Avatar))
        {
            <dt>
                Profile Picture
            </dt>
            <dd>
                <img src="~/File?id=@Model.Files.First(f => f.FileType == Capstone.Models.FileType.Avatar).FileId" alt="avatar" style="width:160px;height:220px;" />
            </dd>
        }*@

            @*<dt>
            @Html.DisplayNameFor(model => model.ItemPhoto)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ItemPhoto)
            <img src="@Url.Action("ItemPhotos", "Items" )" height="198" width="128" />
        </dd>*@

            <dt>
                @Html.DisplayNameFor(model => model.ItemName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ItemName)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Price)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Price)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Category)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Category)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Condition)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Condition)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Summary)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Summary)
            </dd>
    </dl>
</div>


<p><center>
    @Html.ActionLink("Back to List Of All Items", "Index")       |
    @Html.ActionLink("Sellers Profile", "Details", new { id = Model.SellersId }, "Sellers") @*takes me to items details i want sellers details*@
</center>
</p>
