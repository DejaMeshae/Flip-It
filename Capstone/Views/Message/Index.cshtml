@model IEnumerable<Capstone.Models.Message>

@{
    ViewBag.Title = "Index";
}

<h2>Inbox</h2>

<p>
    @*@Html.ActionLink("Create New", "Create")*@
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Sellers.Firstname)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MessageBox)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Sellers.Firstname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MessageBox)
            </td>
            <td>
                @*@Html.ActionLink("Edit", "Edit", new { id=item.MessageId }) |*@ |
                @Html.ActionLink("Reply", "Create", new { id = item.MessageId }) |
                @*@Html.ActionLink("Details", "Details", new { id = item.MessageId }) |*@
                @*@Html.ActionLink("Delete", "Delete", new { id = item.MessageId })*@
            </td>
        </tr>
    }

</table>
@Html.ActionLink("Check out with PayPal", "PayPalCheckout")   |


<div id="container"></div>

<script>
@*/**
 * Define the version of the Google Pay API referenced when creating your
 * configuration
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#PaymentDataRequest|apiVersion in PaymentDataRequest}
 */*@
    const baseRequest = {
      apiVersion: 2,
      apiVersionMinor: 0
    };

@*/**
 * Card networks supported by your site and your gateway
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#CardParameters|CardParameters}
 * @todo confirm card networks supported by your site and gateway
 */*@
    const allowedCardNetworks = ["AMEX", "DISCOVER", "JCB", "MASTERCARD", "VISA"];

@*/**
 * Card authentication methods supported by your site and your gateway
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#CardParameters|CardParameters}
 * @todo confirm your processor supports Android device tokens for your
 * supported card networks
 */*@
    const allowedCardAuthMethods = ["PAN_ONLY", "CRYPTOGRAM_3DS"];

@*/**
 * Identify your gateway and your site's gateway merchant identifier
 *
 * The Google Pay API response will return an encrypted payment method capable
 * of being charged by a supported gateway after payer authorization
 *
 * @todo check with your gateway on the parameters to pass
 * @see {@link https://developers.google.com/pay/api/web/reference/object#Gateway|PaymentMethodTokenizationSpecification}
 */*@
    const tokenizationSpecification = {
      type: 'PAYMENT_GATEWAY',
      parameters: {
        'gateway': 'example',
        'gatewayMerchantId': 'exampleGatewayMerchantId'
      }
    };

@*/**
 * Describe your site's support for the CARD payment method and its required
 * fields
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#CardParameters|CardParameters}
 */*@
    const baseCardPaymentMethod = {
      type: 'CARD',
      parameters: {
        allowedAuthMethods: allowedCardAuthMethods,
        allowedCardNetworks: allowedCardNetworks
      }
    };

@*/**
 * Describe your site's support for the CARD payment method including optional
 * fields
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#CardParameters|CardParameters}
 */*@
    const cardPaymentMethod = Object.assign(
      {},
      baseCardPaymentMethod,
      {
        tokenizationSpecification: tokenizationSpecification
      }
    );

@*/**
 * An initialized google.payments.api.PaymentsClient object or null if not yet set
 *
 * @see {@link getGooglePaymentsClient}
 */*@
    let paymentsClient = null;

@*/**
 * Configure your site's support for payment methods supported by the Google Pay
 * API.
 *
 * Each member of allowedPaymentMethods should contain only the required fields,
 * allowing reuse of this base request when determining a viewer's ability
 * to pay and later requesting a supported payment method
 *
 * @returns {object} Google Pay API version, payment methods supported by the site
 */*@
    function getGoogleIsReadyToPayRequest() {
      return Object.assign(
          {},
          baseRequest,
          {
            allowedPaymentMethods: [baseCardPaymentMethod]
          }
      );
    }

@*/**
 * Configure support for the Google Pay API
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#PaymentDataRequest|PaymentDataRequest}
 * @returns {object} PaymentDataRequest fields
 */*@
    function getGooglePaymentDataRequest() {
      const paymentDataRequest = Object.assign({}, baseRequest);
      paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];
      paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
      paymentDataRequest.merchantInfo = {
        @*// @todo a merchant ID is available for a production environment after approval by Google
        // See {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist|Integration checklist}
        // merchantId: '01234567890123456789',*@
        merchantName: 'Example Merchant'
      };
      return paymentDataRequest;
    }

@*/**
 * Return an active PaymentsClient or initialize
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}
 * @returns {google.payments.api.PaymentsClient} Google Pay API client
 */*@
    function getGooglePaymentsClient() {
      if ( paymentsClient === null ) {
        paymentsClient = new google.payments.api.PaymentsClient({environment: 'TEST'});
      }
      return paymentsClient;
    }

/**
 * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded
 *
 * Display a Google Pay payment button after confirmation of the viewer's
 * ability to pay.
 */
    function onGooglePayLoaded() {
      const paymentsClient = getGooglePaymentsClient();
      paymentsClient.isReadyToPay(getGoogleIsReadyToPayRequest())
          .then(function(response) {
            if (response.result) {
              addGooglePayButton();
              @*// @todo prefetch payment data to improve performance after confirming site functionality
              // prefetchGooglePaymentData();*@
            }
          })
          .catch(function(err) {
            // show error in developer console for debugging
            console.error(err);
          });
    }

@*/**
 * Add a Google Pay purchase button alongside an existing checkout button
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#ButtonOptions|Button options}
 * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}
 */*@
    function addGooglePayButton() {
      const paymentsClient = getGooglePaymentsClient();
      const button =
          paymentsClient.createButton({onClick: onGooglePaymentButtonClicked});
      document.getElementById('container').appendChild(button);
    }

@*/**
 * Provide Google Pay API with a payment amount, currency, and amount status
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/object#TransactionInfo|TransactionInfo}
 * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest
 */*@
    function getGoogleTransactionInfo() {
      return {
        currencyCode: 'USD',
        totalPriceStatus: 'FINAL',
        // set to cart total
        totalPrice: '1.00'
      };
    }

@*/**
 * Prefetch payment data to improve performance
 *
 * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}
 */*@
    function prefetchGooglePaymentData() {
      const paymentDataRequest = getGooglePaymentDataRequest();
      // transactionInfo must be set but does not affect cache
      paymentDataRequest.transactionInfo = {
        totalPriceStatus: 'NOT_CURRENTLY_KNOWN',
        currencyCode: 'USD'
      };
      const paymentsClient = getGooglePaymentsClient();
      paymentsClient.prefetchPaymentData(paymentDataRequest);
    }

/**
 * Show Google Pay payment sheet when Google Pay payment button is clicked
 */
    function onGooglePaymentButtonClicked() {
      const paymentDataRequest = getGooglePaymentDataRequest();
      paymentDataRequest.transactionInfo = getGoogleTransactionInfo();

      const paymentsClient = getGooglePaymentsClient();
      paymentsClient.loadPaymentData(paymentDataRequest)
          .then(function(paymentData) {
            // handle the response
            processPayment(paymentData);
          })
          .catch(function(err) {
            // show error in developer console for debugging
            console.error(err);
          });
    }

@*/**
 * Process payment data returned by the Google Pay API
 *
 * @param {object} paymentData response from Google Pay API after user approves payment
 * @see {@link https://developers.google.com/pay/api/web/reference/object#PaymentData|PaymentData object reference}
 */*@
    function processPayment(paymentData) {
  // show returned data in developer console for debugging
        console.log(paymentData);
  @*// @todo pass payment token to your gateway to process payment*@
      paymentToken = paymentData.paymentMethodData.tokenizationData.token;
    }
</script>
<script async
        src="https://pay.google.com/gp/p/js/pay.js"
        onload="onGooglePayLoaded()"></script>

@*<div id="dropin-container"></div>
    <button id="submit-button">Request payment method</button>
    <script>
        var button = document.querySelector('#submit-button');

        braintree.dropin.create({
            authorization: 'sandbox_hc3rn5cy_kfftvbpvtxjphm2n', //sandbox_hc3rn5cy_kfftvbpvtxjphm2n
            container: '#dropin-container',
            applePay: {
                displayName: 'Merchant Name',
                paymentRequest: {
                    label: 'Localized Name',
                    total: '10.00'
                }
            },
            paypal: {
                flow: 'checkout',
                amount: '10.00',
                currency: 'USD'
            },
            paypalCredit: {
                flow: 'checkout',
                amount: '10.00',
                currency: 'USD'
            },
            venmo: true
        }, function (err, instance) {
            button.addEventListener('click', function () {
                instance.requestPaymentMethod(function (requestPaymentMethodErr, payload) {
                    // Submit payload.nonce to your server
                });
            });
        });

            <form id="payment-form" action="/" method="post">
                <div id="dropin-container"></div>
                <input type="submit" value="Purchase"></input>
                <input type="hidden" id="nonce" name="payment_method_nonce"></input>
            </form>

            var form = document.querySelector('#payment-form');
            var nonceInput = document.querySelector('#nonce');

        braintree.dropin.create({
                authorization: 'sandbox_hc3rn5cy_kfftvbpvtxjphm2n',
            container: '#dropin-container'
        }, function (err, dropinInstance) {
        if (err) {
                // Handle any errors that might've occurred when creating Drop-in
                console.error(err);
            return;
            }
        form.addEventListener('submit', function (event) {
                event.preventDefault();

            dropinInstance.requestPaymentMethod(function (err, payload) {
            if (err) {
                // Handle errors in requesting payment method
                return ;
            }

            // Send payload.nonce to your server
            nonceInput.value = payload.nonce;
            form.submit();
        });
        });
        });*@

@*</script>*@

